/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockerInterface extends ethers.utils.Interface {
  functions: {
    "lock(address,uint256,string)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "release(address,uint256,address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;

  events: {
    "LockNFT(address,address,uint256,uint256,string)": EventFragment;
    "ReleaseNFT(address,address,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseNFT"): EventFragment;
}

export type LockNFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    _nftAddress: string;
    _from: string;
    _tokenId: BigNumber;
    _nounce: BigNumber;
    _data: string;
  }
>;

export type ReleaseNFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    _nftAddress: string;
    _to: string;
    _tokenId: BigNumber;
    _nounce: BigNumber;
    _data: string;
  }
>;

export class Locker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockerInterface;

  functions: {
    lock(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _receiver: string,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lock(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _receiver: string,
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lock(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    release(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _receiver: string,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LockNFT(address,address,uint256,uint256,string)"(
      _nftAddress?: null,
      _from?: null,
      _tokenId?: null,
      _nounce?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _nftAddress: string;
        _from: string;
        _tokenId: BigNumber;
        _nounce: BigNumber;
        _data: string;
      }
    >;

    LockNFT(
      _nftAddress?: null,
      _from?: null,
      _tokenId?: null,
      _nounce?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _nftAddress: string;
        _from: string;
        _tokenId: BigNumber;
        _nounce: BigNumber;
        _data: string;
      }
    >;

    "ReleaseNFT(address,address,uint256,uint256,string)"(
      _nftAddress?: null,
      _to?: null,
      _tokenId?: null,
      _nounce?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _nftAddress: string;
        _to: string;
        _tokenId: BigNumber;
        _nounce: BigNumber;
        _data: string;
      }
    >;

    ReleaseNFT(
      _nftAddress?: null,
      _to?: null,
      _tokenId?: null,
      _nounce?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _nftAddress: string;
        _to: string;
        _tokenId: BigNumber;
        _nounce: BigNumber;
        _data: string;
      }
    >;
  };

  estimateGas: {
    lock(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _receiver: string,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lock(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _receiver: string,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
